// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  address       String?
  city          String?
  state         String?
  country       String?
  bio           String?   @db.Text
  balance       Float     @default(0.0)
  accounts      Account[]
  sessions      Session[]
  auctions      Auction[]
  bids          Bid[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Auction {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  startPrice   Float
  currentPrice Float
  imageData    Bytes?   @db.LongBlob
  imageType    String?
  category     String
  condition    String
  startDate    DateTime @default(now())
  endDate      DateTime
  status       String   @default("ACTIVE") // ACTIVE, ENDED, CANCELLED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sellerId     String
  seller       User     @relation(fields: [sellerId], references: [id])
  bids         Bid[]

  @@index([category])
  @@index([status])
  @@index([sellerId])
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  auctionId String
  bidderId  String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  bidder    User     @relation(fields: [bidderId], references: [id])

  @@index([auctionId])
  @@index([bidderId])
}
